#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Mar 13 19:10:32 2018

@author: muthuvel
"""
import numpy as np
from scipy.optimize import minimize
from scipy.io import loadmat
from numpy.linalg import det, inv
from math import sqrt, pi
import scipy.io
import matplotlib.pyplot as plt
import pickle
import sys

def ldaLearn(X,y):

    # IMPLEMENT THIS METHOD 
    c=np.hstack((X,y))    
    UE  = np.unique (y[:,0])
    mean = np.zeros ((np.shape(X)[1], len(UE))) #initializing mean matrix
    coVariance = np.zeros ((np.shape(X)[1], np.shape(X)[1])) #initialzing covariance matrix
    array=np.array
    ## Calculation of mean
    for i in range (0,len(Xtest)):
        j=ytest[i]
        a=np.append(a[:,j],)
    ## Calculation of covariance matrix

    
    coVariance = np.cov(np.transpose(X))
    
    return mean,coVariance


def ldaTest(means,covmat,Xtest,ytest):
    #c = np.hstack((Xtest,ytest))  
    classes, count = np.unique(ytest[:,0], return_counts = True)
    theta = np.zeros (np.shape(means)[1])
    label = np.zeros([len(Xtest),1])
    eff = np.zeros([len(Xtest),np.shape(means)[1]])
    acc = np.zeros(len(Xtest))
    D = np.zeros(np.shape(means)[1])
    a = np.array([1,2,3,4,5])  
     
    for i in range (0,np.shape(means)[1]):    
        X=Xtest
        nu=np.matlib.repmat(means[:,i],len(Xtest),1)
        sigma=inv(covmat)   ## change coVariance to covmats
        D=np.matmul(np.matmul((X-nu),sigma),np.transpose(X-nu)) #pdf for all samples for a specific class
        eff[:,i] = np.diagonal(D)
        
    for i in range (0,len(Xtest)):    
        l=np.where(eff[i,:]==np.amin(eff[i,:]))
        label[i]=a[l]
        if label[i]==ytest[i]:
            acc[i]=1
        else:
            acc[i]=0
        
    unique, counts = np.unique(acc, return_counts=True)
    accuracy=np.count_nonzero(acc==1)/len(acc)*100 ## changed count parameter
    
    return accuracy,label

if sys.version_info.major == 2:
    X,y,Xtest,ytest = pickle.load(open('sample.pickle','rb'))
else:
    X,y,Xtest,ytest = pickle.load(open('sample.pickle','rb'),encoding = 'latin1')




means,covmat = ldaLearn(X,y)
ldaacc,ldares = ldaTest(means,covmat,Xtest,ytest)